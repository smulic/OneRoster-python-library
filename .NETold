using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Linq;
using Newtonsoft.Json.Linq;
using System.Threading;
using Microsoft.Extensions.Configuration;

namespace OneRosterAPI
{
    public class OneRoster
    {
        // Base URL for the OneRoster API
        private readonly string baseUrl;
        // Client ID and Secret for OAuth
        private readonly string clientId;
        private readonly string clientSecret;

        // Endpoints to pull data from
        private static readonly string[] ENDPOINTS = {
            "/academicSessions",
            "/orgs",
            "/courses",
            "/classes",
            "/users",
            "/enrollments",
            "/demographics"
        };

        // Page size for API requests
        private const int PAGE_SIZE = 10000;

        public OneRoster(IConfiguration configuration)
        {
            // Load the configuration settings
            clientId = configuration["CLIENT_ID"];
            clientSecret = configuration["CLIENT_SECRET"];
            baseUrl = configuration["BASE_URL"];
        }

        public async Task<Dictionary<string, List<JObject>>> PullCompleteDataSetAsync()
        {
            var allData = new Dictionary<string, List<JObject>>();
            // Loop through each endpoint to pull all data
            foreach (var endpoint in ENDPOINTS)
            {
                allData[endpoint] = await PullAllDataAsync(endpoint);
            }
            return allData;
        }

        private async Task<List<JObject>> PullAllDataAsync(string endpoint)
        {
            var data = new List<JObject>();
            int offset = 0;
            int? totalCount = null;

            while (data.Count != totalCount)
            {
                var response = await MakeRequestWithRetriesAsync(endpoint, offset: offset);
                if (response.StatusCode != 200)
                {
                    Console.WriteLine($"Error in request to endpoint {endpoint} - {response.StatusCode}");
                    break;
                }

                var responseData = JObject.Parse(response.Response)["items"].ToObject<List<JObject>>();
                data.AddRange(responseData);

                if (totalCount == null)
                {
                    totalCount = int.Parse(response.Headers["x-total-count"]);
                }

                offset += PAGE_SIZE;
            }

            return data;
        }

        private async Task<(int StatusCode, string Response, Dictionary<string, string> Headers)> MakeRequestWithRetriesAsync(string endpoint, int limit = PAGE_SIZE, int offset = 0)
        {
            int retries = 0;
            const int maxRetries = 3;
            const int baseWaitTime = 1;

            while (retries < maxRetries)
            {
                var response = await MakeRosterRequestAsync(endpoint, limit, offset);
                if (response.StatusCode == 200)
                {
                    return response;
                }
                else if (response.StatusCode == 429 || response.StatusCode == 502)
                {
                    var waitTime = baseWaitTime * Math.Pow(2, retries) + new Random().NextDouble();
                    Thread.Sleep(TimeSpan.FromSeconds(waitTime));
                    retries++;
                }
                else
                {
                    return response;
                }
            }

            return (0, "Max retries exceeded", null);
        }

        private async Task<(int StatusCode, string Response, Dictionary<string, string> Headers)> MakeRosterRequestAsync(string endpoint, int limit, int offset)
        {
            using (var client = new HttpClient())
            {
                var url = $"{baseUrl}{endpoint}?limit={limit}&offset={offset}";

                // Generate timestamp and nonce for OAuth
                var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
                var nonce = GenerateNonce(timestamp.Length);

                // OAuth parameters
                var oauthParams = new Dictionary<string, string>
                {
                    { "oauth_consumer_key", clientId },
                    { "oauth_signature_method", "HMAC-SHA256" },
                    { "oauth_timestamp", timestamp },
                    { "oauth_nonce", nonce }
                };

                var (baseUrl, urlParams) = SplitUrl(url);
                var allParams = oauthParams.Concat(urlParams).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

                // Create the base string for the OAuth signature
                var baseString = BuildBaseString(baseUrl, "GET", allParams);
                // Create the composite key for HMAC
                var compositeKey = HttpUtility.UrlEncode(clientSecret) + "&";
                // Generate the OAuth signature
                var authSignature = GenerateAuthSignature(baseString, compositeKey);
                oauthParams["oauth_signature"] = authSignature;

                // Build the OAuth authorization header
                var authHeader = BuildAuthHeader(oauthParams);

                // Make the GET request to the API
                var request = new HttpRequestMessage(HttpMethod.Get, baseUrl);
                request.Headers.Add("Authorization", authHeader);
                foreach (var param in urlParams)
                {
                    request.Headers.Add(param.Key, param.Value);
                }

                var response = await client.SendAsync(request);
                var responseContent = await response.Content.ReadAsStringAsync();

                var headers = response.Headers.ToDictionary(h => h.Key, h => string.Join(",", h.Value));
                return ((int)response.StatusCode, responseContent, headers);
            }
        }

        private static string GenerateNonce(int length)
        {
            const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var random = new Random();
            return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
        }

        private static (string BaseUrl, Dictionary<string, string> UrlParams) SplitUrl(string url)
        {
            var uri = new Uri(url);
            var baseUrl = $"{uri.Scheme}://{uri.Host}{uri.AbsolutePath}";
            var queryParams = HttpUtility.ParseQueryString(uri.Query);
            var urlParams = queryParams.AllKeys.ToDictionary(k => k, k => queryParams[k]);
            return (baseUrl, urlParams);
        }

        private static string BuildBaseString(string baseUrl, string method, Dictionary<string, string> params)
        {
            var encodedParams = string.Join("&", params.OrderBy(kvp => kvp.Key).Select(kvp => $"{kvp.Key}={HttpUtility.UrlEncode(kvp.Value)}"));
            return $"{method}&{HttpUtility.UrlEncode(baseUrl)}&{HttpUtility.UrlEncode(encodedParams)}";
        }

        private static string GenerateAuthSignature(string baseString, string compositeKey)
        {
            using (var hasher = new HMACSHA256(Encoding.ASCII.GetBytes(compositeKey)))
            {
                var hash = hasher.ComputeHash(Encoding.ASCII.GetBytes(baseString));
                return Convert.ToBase64String(hash);
            }
        }

        private static string BuildAuthHeader(Dictionary<string, string> oauthParams)
        {
            var headerParams = string.Join(", ", oauthParams.Select(kvp => $"{kvp.Key}=\"{HttpUtility.UrlEncode(kvp.Value)}\""));
            return $"OAuth {headerParams}";
        }

        static async Task Main(string[] args)
        {
            var builder = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddEnvironmentVariables();

            IConfiguration configuration = builder.Build();

            var roster = new OneRoster(configuration);
            var data = await roster.PullCompleteDataSetAsync();
            Console.WriteLine(data);
        }
    }
}
