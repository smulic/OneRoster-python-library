package OneRoster

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"errors"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"
)

const (
	limit     = 10000
	maxRetries = 5
	baseWait   = 1 * time.Second
)

// OneRoster holds the client_id and client_secret for authentication
type OneRoster struct {
	clientId     string
	clientSecret string
	client       *http.Client
}

// New creates a new OneRoster instance with a reusable HTTP client
func New(clientId, clientSecret string) *OneRoster {
	return &OneRoster{
		clientId:     clientId,
		clientSecret: clientSecret,
		client:       &http.Client{},
	}
}

// PullAllData pulls all data for the given endpoint
// It handles pagination, making repeated requests until all data is retrieved
func (rr *OneRoster) PullAllData(endpoint string) ([]string, error) {
	offset := 0
	totalCount := 0
	var allData []string

	for {
		// Make a request to pull data with pagination
		statusCode, body, headers, err := rr.makeRosterRequest(endpoint, limit, offset)
		if err != nil {
			return nil, err
		}

		// Handle 429 and 502 errors with exponential backoff and jitter
		if statusCode == 429 || statusCode == 502 {
			waitTime := baseWait * time.Duration(1<<offset)
			waitTime += time.Duration(rand.Intn(1000)) * time.Millisecond
			time.Sleep(waitTime)
			offset++
			if offset > maxRetries {
				return nil, errors.New("max retries reached, request failed")
			}
			continue
		}

		// Return error if status code is not 200 (OK)
		if statusCode != 200 {
			return nil, fmt.Errorf("failed to pull data: status code %d", statusCode)
		}

		// Append the retrieved data to the allData slice
		allData = append(allData, body)

		// Parse headers to get the counts for pagination
		xCount := parseHeader(headers, "x-count")
		xTotalCount := parseHeader(headers, "x-total-count")

		totalCount += xCount
		if totalCount >= xTotalCount || xCount == 0 {
			break
		}
		offset += limit
	}

	return allData, nil
}

// makeRosterRequest makes a request to the given OneRoster URL with pagination and the stored key and secret
// It returns the status code, JSON response, headers, and any error encountered
func (rr *OneRoster) makeRosterRequest(endpoint string, limit, offset int) (int, string, http.Header, error) {
	reqUrl := fmt.Sprintf("%s?limit=%d&offset=%d", endpoint, limit, offset)
	timestamp := fmt.Sprint(time.Now().Unix())
	nonce := generateNonce(len(timestamp))

	// Prepare OAuth parameters
	oauth := map[string]string{
		"oauth_consumer_key":     rr.clientId,
		"oauth_signature_method": "HMAC-SHA256",
		"oauth_timestamp":        timestamp,
		"oauth_nonce":            nonce,
	}

	// Build the base string and signature for the request
	urlPieces := strings.Split(reqUrl, "?")
	allParams := mergeParams(parseParams(urlPieces[1]), oauth)
	baseInfo := buildBaseString(urlPieces[0], "GET", allParams)
	compositeKey := url.QueryEscape(rr.clientSecret) + "&"
	oauth["oauth_signature"] = generateSig(baseInfo, compositeKey)

	// Create the authorization header
	authHeader := buildAuthHeader(oauth)
	return rr.makeGetRequest(reqUrl, authHeader)
}

// makeGetRequest makes the actual request to the URL with the generated auth header
// It returns the status code, JSON response, headers, and any error encountered
func (rr *OneRoster) makeGetRequest(reqUrl, authHeader string) (int, string, http.Header, error) {
	req, err := http.NewRequest("GET", reqUrl, nil)
	if err != nil {
		return 0, "", nil, err
	}

	// Add the authorization header to the request
	req.Header.Add("Authorization", authHeader)
	resp, err := rr.client.Do(req)
	if err != nil {
		return 0, "", nil, err
	}
	defer resp.Body.Close()

	// Read the response body
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return 0, "", nil, err
	}
	return resp.StatusCode, string(bodyBytes), resp.Header, nil
}

// buildAuthHeader creates the auth header from a map of the oauth parameters
func buildAuthHeader(oauthInfo map[string]string) string {
	values := make([]string, 0, len(oauthInfo))
	for key, value := range oauthInfo {
		values = append(values, fmt.Sprintf(`%s="%s"`, key, url.QueryEscape(value)))
	}
	return "OAuth " + strings.Join(values, ", ")
}

// generateSig generates the auth signature from the base info and composite key
func generateSig(baseInfo, compositeKey string) string {
	h := hmac.New(sha256.New, []byte(compositeKey))
	h.Write([]byte(baseInfo))
	return base64.StdEncoding.EncodeToString(h.Sum(nil))
}

// buildBaseString generates the base string from the base URL, method, and all of the params
func buildBaseString(baseUrl, method string, params map[string]string) string {
	keys := make([]string, 0, len(params))
	for key := range params {
		keys = append(keys, key)
	}
	sort.Strings(keys)

	r := make([]string, 0, len(keys))
	for _, key := range keys {
		r = append(r, fmt.Sprintf("%s=%s", key, urlEscape(params[key])))
	}
	return fmt.Sprintf("%s&%s&%s", method, url.QueryEscape(baseUrl), url.QueryEscape(strings.Join(r, "&")))
}

// urlEscape URL encodes the string
func urlEscape(str string) string {
	escaped := url.QueryEscape(str)
	return strings.ReplaceAll(escaped, "+", "%20")
}

// mergeParams merges the two maps of params into one map of params
func mergeParams(urlParams, oauth map[string]string) map[string]string {
	result := make(map[string]string, len(urlParams)+len(oauth))
	for key, value := range urlParams {
		result[key] = value
	}
	for key, value := range oauth {
		result[key] = value
	}
	return result
}

// parseParams converts the params in the url string to a map
func parseParams(urlParams string) map[string]string {
	result := make(map[string]string)
	if urlParams == "" {
		return result
	}

	params := strings.Split(urlParams, "&")
	for _, value := range params {
		value, _ := url.PathUnescape(value)
		split := strings.SplitN(value, "=", 2)
		if len(split) == 2 {
			result[split[0]] = split[1]
		} else {
			result["filter"] = value[7:]
		}
	}
	return result
}

// generateNonce generates a random string for the nonce of a given length
func generateNonce(length int) string {
	rand.Seed(time.Now().UnixNano())
	const characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	randomString := make([]byte, length)
	for i := range randomString {
		randomString[i] = characters[rand.Intn(len(characters))]
	}
	return string(randomString)
}

// parseHeader retrieves and parses a specific header from the response
func parseHeader(headers http.Header, key string) int {
	value := headers.Get(key)
	if value == "" {
		return 0
	}
	intValue, err := strconv.Atoi(value)
	if err != nil {
		return 0
	}
	return intValue
}
