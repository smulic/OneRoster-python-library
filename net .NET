using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace OneRosterApi
{
    public class OneRoster
    {
        // Base URL for the OneRoster API
        private readonly string _baseUrl;
        private readonly string _clientId;
        private readonly string _clientSecret;
        private static readonly List<string> Endpoints = new List<string>
        {
            "/academicSessions",
            "/orgs",
            "/courses",
            "/classes",
            "/users",
            "/enrollments",
            "/demographics"
        };

        // Page size for API requests
        private const int PageSize = 10000;
        private static readonly HttpClient HttpClient = new HttpClient();

        public OneRoster(IConfiguration configuration)
        {
            _clientId = configuration["CLIENT_ID"];
            _clientSecret = configuration["CLIENT_SECRET"];
            _baseUrl = configuration["BASE_URL"];
        }

        public async Task<Dictionary<string, List<Dictionary<string, object>>>> PullCompleteDataSet()
        {
            var allData = new Dictionary<string, List<Dictionary<string, object>>>();

            foreach (var endpoint in Endpoints)
            {
                allData[endpoint] = await PullAllData(endpoint);
            }

            return allData;
        }

        private async Task<List<Dictionary<string, object>>> PullAllData(string endpoint)
        {
            var data = new List<Dictionary<string, object>>();
            var offset = 0;
            int? totalCount = null;

            while (totalCount == null || data.Count < totalCount)
            {
                var response = await MakeRequestWithRetries(endpoint, PageSize, offset);

                if (response.StatusCode != 200)
                {
                    Console.WriteLine($"Error in request to endpoint {endpoint} - {response.StatusCode}");
                    break;
                }

                var responseData = JsonConvert.DeserializeObject<Dictionary<string, object>>(response.Response);
                var currentData = ((Newtonsoft.Json.Linq.JArray)responseData[endpoint.TrimStart('/')]).ToObject<List<Dictionary<string, object>>>();
                data.AddRange(currentData);

                if (totalCount == null)
                {
                    if (response.Headers.TryGetValue("x-total-count", out var totalCountHeader))
                    {
                        totalCount = int.Parse(totalCountHeader);
                    }
                    else
                    {
                        totalCount = currentData.Count;
                    }
                }

                offset += PageSize;
            }

            return data;
        }

        private async Task<ApiResponse> MakeRequestWithRetries(string endpoint, int limit, int offset)
        {
            var retries = 0;
            const int maxRetries = 3;
            const int baseWaitTime = 1;

            while (retries < maxRetries)
            {
                var response = await MakeRosterRequest(endpoint, limit, offset);
                if (response.StatusCode == 200)
                {
                    return response;
                }
                if (response.StatusCode == 429 || response.StatusCode == 502)
                {
                    var waitTime = baseWaitTime * Math.Pow(2, retries) + new Random().Next(0, 1000) / 1000.0;
                    await Task.Delay(TimeSpan.FromSeconds(waitTime));
                    retries++;
                }
                else
                {
                    return response;
                }
            }

            return new ApiResponse
            {
                StatusCode = 0,
                Response = "Max retries exceeded"
            };
        }

        private async Task<ApiResponse> MakeRosterRequest(string endpoint, int limit, int offset)
        {
            var url = $"{_baseUrl}{endpoint}?limit={limit}&offset={offset}";
            var timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString();
            var nonce = GenerateNonce(timestamp.Length);

            var oauthParams = new Dictionary<string, string>
            {
                {"oauth_consumer_key", _clientId},
                {"oauth_signature_method", "HMAC-SHA256"},
                {"oauth_timestamp", timestamp},
                {"oauth_nonce", nonce}
            };

            var (baseUrl, urlParams) = SplitUrl(url);
            var allParams = MergeDicts(oauthParams, urlParams);

            var baseString = BuildBaseString(baseUrl, "GET", allParams);
            var compositeKey = $"{Uri.EscapeDataString(_clientSecret)}&";
            var authSignature = GenerateAuthSignature(baseString, compositeKey);
            oauthParams["oauth_signature"] = authSignature;

            var authHeader = BuildAuthHeader(oauthParams);

            return await MakeGetRequest(baseUrl, authHeader, urlParams);
        }

        private static async Task<ApiResponse> MakeGetRequest(string url, string authHeader, Dictionary<string, string> urlParams)
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, url);
            requestMessage.Headers.Add("Authorization", authHeader);

            if (urlParams != null)
            {
                requestMessage.RequestUri = new Uri(url + "?" + string.Join("&", urlParams.Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}")));
            }

            try
            {
                var response = await HttpClient.SendAsync(requestMessage);
                var responseContent = await response.Content.ReadAsStringAsync();
                var headers = response.Headers.ToDictionary(h => h.Key, h => string.Join(",", h.Value));
                return new ApiResponse
                {
                    StatusCode = (int)response.StatusCode,
                    Response = responseContent,
                    Headers = headers
                };
            }
            catch (HttpRequestException e)
            {
                return new ApiResponse
                {
                    StatusCode = 0,
                    Response = $"An error occurred: {e.Message}"
                };
            }
        }

        private static Dictionary<string, string> MergeDicts(Dictionary<string, string> oauth, Dictionary<string, string> paramsDict)
        {
            return oauth.Concat(paramsDict).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }

        private static string GenerateNonce(int length)
        {
            const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var random = new Random();
            return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
        }

        private static (string baseUrl, Dictionary<string, string> urlParams) SplitUrl(string url)
        {
            if (url.Contains("?"))
            {
                var parts = url.Split('?', 2);
                var baseUrl = parts[0];
                var query = parts[1];
                var queryParams = query.Split('&')
                    .Select(qp => qp.Split('='))
                    .ToDictionary(kvp => kvp[0], kvp => kvp.Length > 1 ? kvp[1] : string.Empty);
                return (baseUrl, queryParams);
            }
            return (url, new Dictionary<string, string>());
        }

        private static string BuildBaseString(string baseUrl, string method, Dictionary<string, string> allParams)
        {
            var encodedParams = string.Join("&", allParams.OrderBy(kvp => kvp.Key).Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));
            return $"{method}&{Uri.EscapeDataString(baseUrl)}&{Uri.EscapeDataString(encodedParams)}";
        }

        private static string GenerateAuthSignature(string baseString, string compositeKey)
        {
            using var hasher = new HMACSHA256(Encoding.UTF8.GetBytes(compositeKey));
            var hash = hasher.ComputeHash(Encoding.UTF8.GetBytes(baseString));
            return Convert.ToBase64String(hash);
        }

        private static string BuildAuthHeader(Dictionary<string, string> oauthParams)
        {
            var headerParams = string.Join(", ", oauthParams.Select(kvp => $"{kvp.Key}=\"{Uri.EscapeDataString(kvp.Value)}\""));
            return $"OAuth {headerParams}";
        }
    }

    public class ApiResponse
    {
        public int StatusCode { get; set; }
        public string Response { get; set; }
        public Dictionary<string, string> Headers { get; set; }
    }

    class Program
    {
        static async Task Main(string[] args)
        {
            var configuration = new ConfigurationBuilder()
                .AddJsonFile("appsettings.json")
                .AddEnvironmentVariables()
                .Build();

            var oneRoster = new OneRoster(configuration);
            var data = await oneRoster.PullCompleteDataSet();

            foreach (var endpoint in data.Keys)
            {
                Console.WriteLine($"{endpoint}: {data[endpoint].Count} records");
            }
        }
    }
}
