import os
import time
import urllib.parse
import hmac
import base64
import hashlib
import requests
from random import randint
from collections import OrderedDict
from typing import Dict, Any, Optional, List
from dotenv import load_dotenv


class OneRoster:
    # Base URL for the OneRoster API
    # Endpoints to pull data from
    ENDPOINTS = [
        "/academicSessions",
        "/orgs",
        "/courses",
        "/classes",
        "/users",
        "/enrollments",
        "/demographics"
    ]
    # Page size for API requests
    PAGE_SIZE = 10000

    def __init__(self):
        load_dotenv()
        # Initialize the OneRoster client with client ID and secret
        self._client_id = os.getenv('CLIENT_ID')
        self._client_secret = os.getenv('CLIENT_SECRET')
        # Base URL for all API requests
        self.base_url = os.getenv('BASE_URL')

    def make_roster_request(self, endpoint: str, limit: int = PAGE_SIZE, offset: int = 0) -> Dict[str, Any]:
        """
        Make a request to the specified endpoint with pagination parameters.

        :param endpoint: The API endpoint to request data from
        :param limit: Number of records per page
        :param offset: Offset for pagination
        :return: A dictionary containing the status code, response data, and headers
        """
        # Construct the URL with pagination parameters
        url = f"{self.base_url}{endpoint}?limit={limit}&offset={offset}"
        # Generate timestamp and nonce for OAuth
        timestamp = str(int(time.time()))
        nonce = self._generate_nonce(len(timestamp))

        # OAuth parameters
        oauth_params = {
            'oauth_consumer_key': self._client_id,
            'oauth_signature_method': 'HMAC-SHA256',
            'oauth_timestamp': timestamp,
            'oauth_nonce': nonce
        }

        # Split URL into base URL and parameters
        base_url, url_params = self._split_url(url)
        # Merge OAuth parameters with URL parameters
        all_params = self._merge_dicts(oauth_params, url_params)

        # Create the base string for the OAuth signature
        base_string = self._build_base_string(base_url, 'GET', all_params)
        # Create the composite key for HMAC
        composite_key = urllib.parse.quote_plus(self._client_secret) + "&"
        # Generate the OAuth signature
        auth_signature = self._generate_auth_signature(base_string, composite_key)
        oauth_params["oauth_signature"] = auth_signature

        # Build the OAuth authorization header
        auth_header = self._build_auth_header(oauth_params)

        # Make the GET request to the API
        return self._make_get_request(base_url, auth_header, url_params)

    def pull_complete_data_set(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        Pull the complete data set from all defined endpoints.

        :return: A dictionary containing data from all endpoints
        """
        all_data = {}
        # Loop through each endpoint to pull all data
        for endpoint in self.ENDPOINTS:
            all_data[endpoint] = self._pull_all_data(endpoint)
        return all_data

    def _pull_all_data(self, endpoint: str) -> List[Dict[str, Any]]:
        """
        Pull all data from a specified endpoint using pagination.

        :param endpoint: The API endpoint to pull data from
        :return: A list of all records from the endpoint
        """
        data = []
        offset = 0
        total_count = None

        while len(data) != total_count:
            # Make the API request with retries
            response = self._make_request_with_retries(endpoint, offset=offset)
            if response["status_code"] != 200:
                code = response["status_code"]
                print(f"Error in request to endpoint {endpoint} - {code}")

            # Get the current page of data
            responseName = endpoint.replace("/","")
            current_data = response["response"][responseName]
            data.extend(current_data)
            

            # Set total_count on the first request
            if total_count is None:
                total_count = int(response["headers"].get("x-total-count", len(current_data)))

            # Update the offset for the next page
            offset += self.PAGE_SIZE

        return data

    def _make_request_with_retries(self, endpoint: str, limit: int = PAGE_SIZE, offset: int = 0) -> Dict[str, Any]:
        """
        Make a request with retries in case of rate limiting or server errors.

        :param endpoint: The API endpoint to request data from
        :param limit: Number of records per page
        :param offset: Offset for pagination
        :return: A dictionary containing the status code, response data, and headers
        """
        retries = 0
        max_retries = 3
        base_wait_time = 1

        while retries < max_retries:
            response = self.make_roster_request(endpoint, limit, offset)
            if response["status_code"] == 200:
                return response
            elif response["status_code"] in {429, 502}:
                # Apply exponential backoff with jitter
                wait_time = base_wait_time * (2 ** retries) + randint(0, 1000) / 1000
                time.sleep(wait_time)
                retries += 1
            else:
                return response

        return {"status_code": response["status_code"], "response": "Max retries exceeded"}

    @staticmethod
    def _merge_dicts(oauth: Dict[str, str], params: Dict[str, str]) -> Dict[str, str]:
        """
        Merge OAuth and URL parameter dictionaries.

        :param oauth: OAuth parameters
        :param params: URL parameters
        :return: A merged dictionary of parameters
        """
        return {**oauth, **params}

    @staticmethod
    def _generate_nonce(length: int) -> str:
        """
        Generate a random nonce.

        :param length: Length of the nonce
        :return: The generated nonce
        """
        characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        return ''.join(characters[randint(0, len(characters) - 1)] for _ in range(length))

    @staticmethod
    def _split_url(url: str) -> (str, Dict[str, str]):
        """
        Split the URL into base URL and parameters.

        :param url: The URL to split
        :return: The base URL and parameters dictionary
        """
        if '?' in url:
            base_url, query_string = url.split('?', 1)
            url_params = {k: v for k, v in (param.split('=') for param in query_string.split('&'))}
        else:
            base_url = url
            url_params = {}
        return base_url, url_params

    @staticmethod
    def _build_base_string(base_url: str, method: str, params: Dict[str, str]) -> str:
        """
        Generate the base string for OAuth signature generation.

        :param base_url: The base URL
        :param method: The HTTP method
        :param params: The URL and OAuth parameters
        :return: The base string for OAuth signature generation
        """
        encoded_params = '&'.join(f"{k}={urllib.parse.quote(v, safe='')}" for k, v in sorted(params.items()))
        return f"{method}&{urllib.parse.quote_plus(base_url)}&{urllib.parse.quote_plus(encoded_params)}"

    @staticmethod
    def _generate_auth_signature(base_string: str, composite_key: str) -> str:
        """
        Generate the OAuth signature.

        :param base_string: The base string for the OAuth signature
        :param composite_key: The composite key for HMAC
        :return: The generated OAuth signature
        """
        digest = hmac.new(composite_key.encode(), base_string.encode(), hashlib.sha256).digest()
        return base64.b64encode(digest).decode()

    @staticmethod
    def _build_auth_header(oauth: Dict[str, str]) -> str:
        """
        Generate the OAuth authorization header.

        :param oauth: OAuth parameters
        :return: The OAuth authorization header
        """
        header_params = ', '.join(f'{k}="{urllib.parse.quote_plus(v)}"' for k, v in oauth.items())
        return f"OAuth {header_params}"

    @staticmethod
    def _make_get_request(url: str, auth_header: str, params: Optional[Dict[str, str]]) -> Dict[str, Any]:
        """
        Make a GET request to the API.

        :param url: The base URL of the request
        :param auth_header: The OAuth authorization header
        :param params: URL parameters
        :return: A dictionary containing the status code, response data, and headers
        """
        try:
            response = requests.get(url, headers={"Authorization": auth_header}, params=params)
            return {
                "status_code": response.status_code,
                "response": response.json(),
                "headers": response.headers
            }
        except requests.RequestException as e:
            return {"status_code": 0, "response": f"An error occurred: {e}"}
        
if __name__ == "__main__":
    roster = OneRoster()
    data = roster.pull_complete_data_set()
    print(data)